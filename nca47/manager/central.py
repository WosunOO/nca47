import copyimport functoolsimport threadingimport timefrom oslo_config import cfgfrom oslo_db import exception as db_exceptionfrom oslo_log import log as loggingfrom nca47.common.i18n import _LIfrom nca47.common.i18n import _LCfrom nca47.common.i18n import _LWfrom nca47.common import exceptionfrom nca47.db import api as db_apifrom nca47.manager import rpcapiCONF = cfg.CONFLOG = logging.getLogger(__name__)CENTRAL_MANAGER = NoneRETRY_STATE = threading.local()class CentralManager(object):    """    nca47 central handler class, using for response client/api requests,    validate parameters whether is legal,  handling DB operations and    calling rpc client's corresponding method to send messaging to agent    endpoints    """    def __init__(self):        self.db_api = db_api.get_instance()        self.rpc_api = rpcapi.DNSManagerAPI.get_instance()    @classmethod    def get_instance(cls):        global CENTRAL_MANAGER        if not CENTRAL_MANAGER:            CENTRAL_MANAGER = cls()        return CENTRAL_MANAGER    # zone methods    def create_zone(self, context, zone):        # Check the zone which have same name if is exist in DB        zone.operation_fro = 'AUTO'        target_zone = self._valid_if_zone_exist(context, zone)        if target_zone is not None:            LOG.warning(_LW("Have same zone id/name in DB"))            return (target_zone)        # handling create zone method in RPC        zone = self.rpc_api.create_zone(context, zone)        zone = self._create_zone_in_storage(context, zone)        return zone    def _valid_if_zone_exist(self, context, zone):        zone_name_dic = {}        zone_name_dic['zone_id'] = zone.zone_name        target_zone = None        try:            target_zone = zone.get_object(context, **zone_name_dic)        except Exception:            pass        return target_zone    def _create_zone_in_storage(self, context, zone):        zone = zone.create(context, zone.as_dict())        return zone    def update_zone(self, context, zone, zone_id):        response = self.rpc_api.update_zone(context, zone, zone_id)        return response    def update_zone_owners(self, context, zone, zone_id):        response = self.rpc_api.update_zone_owners(context, zone, zone_id)        return response    def delete_zone(self, context, zone, zone_id):        response = self.rpc_api.delete_zone(context, zone, zone_id)        return response    def get_zone(self, context, zone, zone_id):        response = self.rpc_api.get_zone(context, zone, zone_id)        return response    def get_all_zone(self, context, zone):        # Todo call DB to get all zones        response = self.rpc_api.get_all_zone(context, zone)        return response    def get_zone_db_details(self, context, zone, zone_id):        # response = self.rpc_api.get_zone(context, zone, zone_id)        return None    def get_all_db_zone(self, context, zone):        # Todo call DB to get all zones        # response = self.rpc_api.get_all_zone(context, zone)        return None    # record methods    def get_dev_records(self, context, record, zone_id):        response = self.rpc_api.get_records(context, record, zone_id)        return response    def get_db_records(self, context, record, zone_id):        # response = self.rpc_api.get_records(context, record, zone_id, rrs_id)        return None    def create_record(self, context, record, zone_id):        response = self.rpc_api.create_record(context, record, zone_id)        return response    def update_record(self, context, record, zone_id, record_id):        response = self.rpc_api.update_record(context, record,                                              zone_id, record_id)        return response    def delete_record(self, context, record, zone_id, record_id):        response = self.rpc_api.delete_record(context, record,                                              zone_id, record_id)        return response    # cache handle method    def del_cache(self, context, domain):        response = self.rpc_api.del_cache(context, domain)        return response